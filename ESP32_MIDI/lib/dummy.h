#include <map>

typedef uint8_t id_t;

enum Menu
{
	None,
	Basic,
	ToneCurve,
	HSL_Color,
	ColorGrading,
	Detail,
	LensCorrection,
	Transform,
	Effects,
	Calibration,
	FIRST_MENU = Basic,
	LAST_MENU = Calibration,
};

// typedef void (*buttonFunction_t)();
// typedef void (*knobFunction_t)();

const std::map<Menu, std::map<id_t, void (*)()>> buttonsFunctions = {
	{None,
	 {{0, []() {}}}},
	{Basic,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}},
	  {9, []() {}},
	  {10, []() {}},
	  {11, []() {}},
	  {12, []() {}}}},
	{ToneCurve,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}},
	  {9, []() {}},
	  {10, []() {}},
	  {11, []() {}},
	  {12, []() {}}}},
	{HSL_Color,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}},
	  {9, []() {}},
	  {10, []() {}},
	  {11, []() {}},
	  {12, []() {}}}},
	{ColorGrading,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}},
	  {9, []() {}},
	  {10, []() {}},
	  {11, []() {}},
	  {12, []() {}}}},
	{Detail,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}},
	  {9, []() {}},
	  {10, []() {}},
	  {11, []() {}},
	  {12, []() {}}}},
	{LensCorrection,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}},
	  {9, []() {}},
	  {10, []() {}},
	  {11, []() {}},
	  {12, []() {}}}},
	{Transform,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}},
	  {9, []() {}},
	  {10, []() {}},
	  {11, []() {}},
	  {12, []() {}}}},
	{Effects,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}},
	  {9, []() {}},
	  {10, []() {}},
	  {11, []() {}},
	  {12, []() {}}}},
	{Calibration,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}},
	  {9, []() {}},
	  {10, []() {}},
	  {11, []() {}},
	  {12, []() {}}}},
};

const std::map<Menu, std::map<id_t, void (*)()>> knobsFunctions = {
	{None,
	 {{0, []() {}}}},
	{Basic,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}}}},
	{ToneCurve,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}}}},
	{HSL_Color,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}}}},
	{ColorGrading,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}}}},
	{Detail,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}}}},
	{LensCorrection,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}}}},
	{Transform,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}}}},
	{Effects,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}}}},
	{Calibration,
	 {{1, []() {}},
	  {2, []() {}},
	  {3, []() {}},
	  {4, []() {}},
	  {5, []() {}},
	  {6, []() {}},
	  {7, []() {}},
	  {8, []() {}}}},
};

const std::map<id_t, std::map<Menu, void (*)()>> buttonsFunctions2 = {
	{1,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{2,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{3,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{4,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{5,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{6,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{7,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{8,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{9,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{10,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{11,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{12,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
};

const std::map<id_t, std::map<Menu, void (*)()>> knobsFunctions2 = {
	{1,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{2,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{3,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{4,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{5,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{6,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{7,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
	{8,
	 {{Basic, []() {}},
	  {ToneCurve, []() {}},
	  {HSL_Color, []() {}},
	  {ColorGrading, []() {}},
	  {Detail, []() {}},
	  {LensCorrection, []() {}},
	  {Transform, []() {}},
	  {Effects, []() {}},
	  {Calibration, []() {}}}},
};
